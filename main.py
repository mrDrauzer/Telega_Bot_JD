from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config import Config
from database.db import init_db
from parsers.telegram_parser import parse_channels
from datetime import datetime
import asyncio
import logging
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
bot = Bot(
    token=Config.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()


async def check_channel_access():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ –∏ –ø—Ä–∞–≤ –±–æ—Ç–∞"""
    try:
        chat = await bot.get_chat(Config.CHANNEL_ID)
        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}")
        logger.info(f"ID: {chat.id}")
        logger.info(f"–¢–∏–ø: {chat.type}")

        me = await bot.get_me()
        member = await bot.get_chat_member(chat.id, me.id)
        if member.status == "administrator":
            logger.info("‚úÖ –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        else:
            logger.error("‚ùå –ë–æ—Ç –ù–ï –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
            raise Exception("Bot is not an admin in the channel")

    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {repr(e)}")
        raise


async def post_to_channel(text: str, source: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {Config.CHANNEL_ID}")
        await bot.send_message(
            chat_id=Config.CHANNEL_ID,
            text=f"üöÇ –ù–æ–≤–æ—Å—Ç—å –∏–∑ {source}:\n\n{text}\n\n#—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç #–∂–¥",
            disable_web_page_preview=True
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        raise


async def scheduled_parse():
    """–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π –ø–∞—Ä—Å–∏–Ω–≥"""
    logger.info("–ó–∞–ø—É—Å–∫ scheduled_parse")
    try:
        async for text, source in parse_channels():
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {text[:50]}...")
            await post_to_channel(text, source)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ scheduled_parse: {str(e)}")


@dp.message(Command("test"))
async def test_message(message: types.Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã"""
    try:
        test_text = (
            "‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞\n"
            f"ID –∫–∞–Ω–∞–ª–∞: {Config.CHANNEL_ID}\n"
            f"–í—Ä–µ–º—è: {datetime.now()}"
        )

        await bot.send_message(
            chat_id=Config.CHANNEL_ID,
            text=test_text,
            disable_web_page_preview=True
        )
        await message.answer("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
    except Exception as e:
        error_msg = (
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            "1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª?\n"
            "2. CHANNEL_ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π?\n"
            f"3. –¢–µ–∫—É—â–∏–π ID: {Config.CHANNEL_ID}"
        )
        await message.answer(error_msg)
        logger.error(f"–û—à–∏–±–∫–∞ –≤ test_message: {str(e)}")


@dp.message(Command("parse"))
async def manual_parse(message: types.Message):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥...")
    try:
        await scheduled_parse()
        await message.answer("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ manual_parse: {str(e)}")


async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ on_startup")
    try:
        await check_channel_access()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
        init_db()
        scheduler.add_job(scheduled_parse, 'interval', minutes=1)
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")
        raise


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, on_startup=on_startup)


if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    try:
        asyncio.run(main())
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")